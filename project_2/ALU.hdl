// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // zx
    Mux16(a=x , b=false , sel=zx , out=zxOut );
    // nx
    Not16(in=zxOut , out=zxNotOut );
    Mux16(a=zxOut , b=zxNotOut , sel=nx , out= xFinalOut);
    // zy
    Mux16(a=y , b=false , sel=zy , out=zyOut );
    // ny
    Not16(in=zyOut , out=zyNotOut );
    Mux16(a=zyOut , b=zyNotOut , sel=ny , out=yFinalOut );

    // f
    Add16(a = xFinalOut, b = yFinalOut, out =xPlusY );
    And16(a=xFinalOut , b= yFinalOut, out=xAndY );
    Mux16(a=xAndY , b=xPlusY , sel=f , out=fOut );

    // no
    Not16(in= fOut, out= notFOut);
    Mux16(a=fOut , b=notFOut , sel=no , out[0..7]=outInput1, out[8..15]=outInput2, out[15] = outMSB );
    Or16(a[0..7]=outInput1,a[8..15]=outInput2 , b= false, out=out );

    // zr
    Or8Way(in=outInput1 , out=zr1 );
    Or8Way(in=outInput2 , out=zr2 );
    Or(a=zr1 , b=zr2 , out=zrFull );
    Not(in=zrFull , out=zr );
    
    // ng
    Mux(a=false , b=true , sel=outMSB , out=ng );
    
}