// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int screenBaseAddress, screenRange;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screenBaseAddress = 16384;
        let color = true;
        let screenRange = 8192;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i, endAddress;
        let i = screenBaseAddress;
        let endAddress = i + screenRange;
        while(i < endAddress) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    /* Example on the bitwise operation done to find x%16th bit to set
        x = 450
        mask value = 450 & 15 = 2^2 (2nd bit since power of 2) = 4 = 0000000000000100
        if current = 0000000000000000 = 0
        0 (current) | 4 (mask) = 0000000000000000 | 0000000000000100 = 2nd bit set to 1 = 0000000000000100 (case color = 1)
        0 (current) & -4 (mask) = 0000000000000000 & 1111111111111011 = 2nd bit set to 0 = 0000000000000000 (case color = 0)
    */
    function void drawPixel(int x, int y) {
        var int address, current, mask;
        let address = (32*y) + (x/16) + screenBaseAddress;
        let current = Memory.peek(address);
        let mask = Math.twoToThe(x & 15);
        if(color) {
            do Memory.poke(address, current | mask);
        } else {
            do Memory.poke(address, current & ~mask);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    /* Line will be jaggered (which apparently is how computers work but the jaggered-ness disappears or becomes less obvious when affected by resolution?)
        x = 0, y = 0
        dx = 4, dy = 4
        1st iteration:
        0 < 4 & 0 < 4
        drawPixel(0,0)
        diff < 0 false
        b = 0 + 1 = 1
        diff = diff - dx = 0 - 4 = -4

        2nd iteration:
        0 < 4 & 1 < 4
        drawPixel(0,1)
        diff < 0 true
        a = 0 + 1 = 1
        diff = diff + dx = -4 + 4 = 0

        3rd iteration:
        1 < 4 & 1 < 4
        drawPixel(1,1)
        diff < 0 false
        b = 1 + 1 = 2
        diff = diff - dx = 0 - 4 = -4

        4th iteration:
        1 < 4 & 2 < 4
        drawPixel(1,2)
        diff < 0 true
        a = 1 + 1 = 2
        diff = diff + dx = -4 + 4 = 0

        5th iteration:
        2 < 4 & 2 < 4
        drawPixel(2,2)
        diff < 0 false
        b = 2 + 1 = 3
        diff = diff - dx = 0 - 4 = -4

        .... etc

    */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, absDx, absDy, a, b, diff;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let diff = 0;
        if(dx = 0) {
            do Screen.drawVerticalLine(x1,y1,dy);
        } else {
            if(dy = 0) {
                do Screen.drawHorizontalLine(x1,y1,dx);
            } else {
                // this implies dx != 0 && dy != 0
                let absDx = Math.abs(dx);
                let absDy = Math.abs(dy);
                while(((a < absDx) | (a = absDx)) & ((b < absDy) | (b = absDy))) {
                    if(dx < 0 & dy < 0) {
                        do Screen.drawPixel(x1 - a, y1 - b);
                    } else {
                        if(dx < 0 & dy > 0) {
                            do Screen.drawPixel(x1 - a, y1 + b);
                        } else {
                            if(dx > 0 & dy < 0) {
                                do Screen.drawPixel(x1 + a, y1 - b);
                            } else {
                                do Screen.drawPixel(x1 + a, y1 + b);
                            }
                        }
                    }

                    if(diff < 0) {
                        let a = a + 1;
                        let diff = diff + absDy;
                    } else {
                        let b = b + 1;
                        let diff = diff - absDx;
                    }

                }
                
            }
        }

        return;
    }

    function void drawVerticalLine(int x1,int y1,int dy) {
        var int i, absDy;
        let absDy = Math.abs(dy);
        let i = 0;
        while((i < absDy) | (i = absDy)) {
            if(dy < 0) {
                do Screen.drawPixel(x1, y1 - i);
            } else {
                if(dy > 0) {
                    do Screen.drawPixel(x1, y1 + i);
                } else {
                    do Screen.drawPixel(x1, y1);
                }
            }
            let i = i + 1;
        }
        return;
    }

    function void drawHorizontalLine(int x1,int y1,int dx) {
        var int i, absDx;
        let absDx = Math.abs(dx);
        let i = 0;
        while((i < absDx) | (i = absDx)) {
            if(dx < 0) {
                do Screen.drawPixel(x1 - i, y1);
            } else {
                if(dx > 0) {
                    do Screen.drawPixel(x1 + i, y1);
                } else {
                    do Screen.drawPixel(x1, y1);
                }
            }
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while((y1 < y2) | (y1 = y2)) {
            do Screen.drawLine(x1,y1,x2,y1);
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, rSquared, dx;
        if(r > 181) {
            let r = 181;
        }
        let rSquared = r * r;
        let dy = -r;
        while((dy < r) | (dy = r)) {
            let dx = Math.sqrt(rSquared-(dy*dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            let dy = dy + 1;
        }

        return;
    }
}
