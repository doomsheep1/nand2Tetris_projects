// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    field int len, maxLen;
    field Array chars;

    constructor String new(int maxLength) {
        if(~(maxLength > 0)) {
            let maxLen = 1;
        } else {
            let maxLen = maxLength;
        }

        let chars = Array.new(maxLen);
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(len < maxLen) {
            let chars[len] = c;
            let len = len + 1;
        }

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(len > 0) {
            let chars[len] = null;
            let len = len - 1;
        }

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. 
        Needs handling of negative numbers 
     */
    method int intValue() {
        var int i, retVal, currInt;
        var boolean neg;
        let neg = false;
        let retVal = 0;
        if(len > 0) {
            let neg = (chars[0] = 45);
            if(neg) {
                let i = 1;
            } else {
                let i = 0;
            }

            while((i < len) & ~(chars[i] < 48) & ~(chars[i] > 57)) {
                let retVal = (retVal * 10) + (chars[i] - 48);
                let i = i + 1;
            }

            if(neg) {
                let retVal = -retVal;
            }
        }
        
        return retVal;
    }

    /** Sets this string to hold a representation of the given value. 
        Needs handling of negative numbers 
     */
    method void setInt(int val) {
        var boolean neg;
        var int lastDigit, remainingDigits;
        var char lastChar;
        let neg = val < 0;
        if(neg) {
            do appendChar(45);
            let val = -val;
        }

        let remainingDigits = val / 10;
        let lastDigit = val - (remainingDigits * 10);
        let lastChar = lastDigit + 48;
        if(val < 10) {
            do appendChar(lastChar);
        } else {
            do setInt(remainingDigits);
            do appendChar(lastChar);
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
